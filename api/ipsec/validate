#!/usr/bin/php
<?php
/*
 * Copyright (C) 2019 Nethesis S.r.l.
 * http://www.nethesis.it - nethserver@nethesis.it
 *
 * This script is part of NethServer.
 *
 * NethServer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or any later version.
 *
 * NethServer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NethServer.  If not, see COPYING.
*/


require_once("/usr/libexec/nethserver/api/lib/Helpers.php");

$data = readInput();

$v = new LegacyValidator($data);
$sdb = new EsmithDatabase('vpn');

if ($data['action'] == 'update') {
    if (!$sdb->getKey($data['name'])) {
        $v->addValidationError('name', 'tunnel_not_found');
    }
} else if ($data['action'] == 'create') {
    if ($sdb->getKey($data['name'])) {
        $v->addValidationError('name', 'tunnel_already_exists');
    }
}

$ciphers = array('3des', 'aes128', 'aes192', 'aes256');
$hashes = array('md5', 'sha1', 'sha2_256', 'sha2_384', 'sha2_512');
$pfsgroups = array('modp1024','modp1536', 'modp2048', 'modp3072', 'modp4096', 'modp6144', 'modp8192');

$yn = $v->createValidator()->memberOf(array(true, false));
$ac = $v->createValidator()->memberOf(array('auto', 'custom'));

$db = new EsmithDatabase('networks');
$i_names = array();
foreach ($db->getAll() as $n => $props) {
    if (isset($props['role']) && ($props['role'] === 'red' || $props['role'] === 'alias') && in_array($props['type'], array('ethernet', 'vlan', 'bridge', 'bond', 'xdsl', 'alias'))) {
        $i_names[] = $n;
    }
}

$lc = $v->createValidator()->memberOf($i_names);
$rv = $v->createValidator()->orValidator($v->createValidator(Validate::HOSTADDRESS), $v->createValidator()->equalTo('%any'));
$idv = $v->createValidator()->maxLength(63);
$v->declareParameter('left', $lc);
$v->declareParameter('leftsubnets', Validate::NOTEMPTY);
$v->declareParameter('leftid', $idv);
$v->declareParameter('right', $rv);
$v->declareParameter('rightsubnets', Validate::NOTEMPTY);
$v->declareParameter('rightid', $idv);
$v->declareParameter('psk', $v->createValidator()->minLength(6));
$v->declareParameter('ikelifetime', Validate::POSITIVE_INTEGER);
$v->declareParameter('salifetime', Validate::POSITIVE_INTEGER);
$v->declareParameter('ike', $ac);
$v->declareParameter('ikecipher', $v->createValidator()->memberOf($ciphers));
$v->declareParameter('ikehash', $v->createValidator()->memberOf($hashes));
$v->declareParameter('ikepfsgroup', $v->createValidator()->memberOf($pfsgroups));
$v->declareParameter('esp', $ac);
$v->declareParameter('espcipher', $v->createValidator()->memberOf($ciphers));
$v->declareParameter('esphash', $v->createValidator()->memberOf($hashes));
$v->declareParameter('esppfsgroup', $v->createValidator()->memberOf($pfsgroups));
$v->declareParameter('status', Validate::SERVICESTATUS);
$v->declareParameter('pfs', $yn);
$v->declareParameter('compress', $yn);
$v->declareParameter('dpdaction', $yn);

# Validate the input
if ($v->validate()) {
    success();
} else {
    error($v);
}
