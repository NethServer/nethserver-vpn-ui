#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use esmith::ConfigDB;
use esmith::NetworksDB;
use NetAddr::IP;
use JSON;

require '/usr/libexec/nethserver/api/nethserver-vpn-ui/lib/vpn_functions.pl';

my $input = readInput();
my $cmd = $input->{'action'};

my $ret = {};

if ($cmd eq 'tunnels') {
    my $db = esmith::ConfigDB->open_ro('vpn');
    my @tunnels;
    my $status = ipsec_status();
    foreach ($db->get_all_by_prop(type => 'ipsec-tunnel')) {
        my %props = $_->props;
        $props{'name'} = $_->key;
        for my $p (qw(leftsubnets rightsubnets)) {
            my ($t, $k) = split(/;/, $props{$p});
            $props{$p} = [split(/,/, $props{$p})];
        }
        $props{'left'} = substr($props{'left'}, 1);
        # map yes/restart and no/hold to true and false
        foreach my $k (keys %props) {
            $props{$k} = JSON::true if ($props{$k} eq 'yes' || $props{$k} eq 'restart');
            $props{$k} = JSON::false if ($props{$k} eq 'no' || $props{$k} eq 'hold');
        }
        $props{'statistics'} = undef;
        if ($status->{$_->key}) {
            $props{'statistics'} = $status->{$_->key};
        }

        push(@tunnels, \%props);
    }

    $ret->{'tunnels'} = \@tunnels;

} elsif ($cmd eq 'interfaces') {

    my @interfaces;
    my $ndb = esmith::NetworksDB->open_ro();
    foreach ($ndb->red()) {
        next if ($_->prop('type') eq 'xdsl-disabled');
        my $bootproto = $_->prop('bootproto') || 'none';
        my $ipaddr = $_->prop('ipaddr') || 'pppoe';
        if ($bootproto eq 'none') {
            push(@interfaces, {"name" => $_->key, "address" => $ipaddr});
        } else {
            push(@interfaces, {"name" => $_->key, "address" => 'dhcp'});
        }
    }
    foreach ($ndb->get_by_role('alias')) {
        my $ipaddr = $_->prop('ipaddr');
        push(@interfaces, {"name" => $_->key, "address" => $ipaddr});
    }

    $ret->{'interfaces'} = \@interfaces;

} elsif ($cmd eq 'subnets') {
    my @nets;
    my $ndb = esmith::NetworksDB->open_ro();
    foreach ($ndb->get_all()) {
        my $ipaddr = $_->prop('ipaddr') || next;
        my $mask = $_->prop('netmask') || next;
        if ($_->prop('role') eq 'green' && $ipaddr) {
            my $net = NetAddr::IP->new($ipaddr, $mask);
            push(@nets, $net->network.""); # force string conversion
        }
    }

    $ret->{'subnets'} = \@nets;
} elsif ($cmd eq 'algorithms') {

    $ret->{'algorithms'} = {
        'ciphers' => [
            { "name" => "3des", "description" => "3DES" },
            { "name" => "aes128", "description" => "AES 128 bit" },
            { "name" => "aes192", "description" => "AES 192 bit" },
            { "name" => "aes256", "description" => "AES 256 bit" }
        ],
        'hashes' => [
            { "name" =>  "md5", "description" => "MD5" },
            { "name" =>  "sha1", "description" => "SHA1" },
            { "name" =>  "sha2_256", "description" => "SHA2 256 bit" },
            { "name" =>  "sha2_384", "description" => "SHA2 384 bit" },
            { "name" =>  "sha2_512", "description" => "SHA2 512 bit" }
        ],
        'pfsgroups' => [
            { "name" =>  "modp1024", "description" => "1024 bit (DH-2)" },
            { "name" =>  "modp1536", "description" => "1536 bit (DH-5)" },
            { "name" =>  "modp2048", "description" => "2048 bit (DH-14)" },
            { "name" =>  "modp3072", "description" => "3072 bit (DH-15)" },
            { "name" =>  "modp4096", "description" => "4096 bit( DH-16)" },
            { "name" =>  "modp6144", "description" => "6144 bit (DH-17)" },
            { "name" =>  "modp8192", "description" => "8192 bit (DH-18)" },
        ]
    };


} else {
    error();
}

print encode_json($ret);
