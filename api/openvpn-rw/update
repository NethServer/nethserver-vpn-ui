#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use esmith::ConfigDB;

require '/usr/libexec/nethserver/api/nethserver-vpn-ui/lib/vpn_functions.pl';

my $input = readInput();
my $cmd = $input->{'action'};

if ($cmd eq 'update-account') {
    my $vdb = esmith::ConfigDB->open('vpn');

    foreach (qw(OpenVpnIp VPNRemoteNetmask VPNRemoteNetwork)) {
        $vdb->set_prop($input->{'name'}, $_, $input->{$_});
    }
    if ($input->{'OpenVpnIp'} ne '') {
        $input->{'name'} =~ s/(@.*)$//; # remove domain part
        openvpn_create_or_update_host($input->{'name'}, $input->{'OpenVpnIp'});
    }
    system(("/sbin/e-smith/signal-event", "-j", "nethserver-openvpn-save"));
} elsif ($cmd eq 'configuration') {

    my $db = esmith::ConfigDB->open();
    foreach (keys %$input) {
        next if ($_ eq 'action' || $_ eq 'Protocol');
        # map UI 'auto' value to empty string
        if ($_ =~ /Cipher|Digest|TlsVersionMin/ && $input->{$_} eq 'auto') {
             $input->{$_} = '';
        }
        if ($_ eq 'Port') {
            if ($input->{'Protocol'} eq 'udp') {
                $db->set_prop('openvpn@host-to-net', 'UDPPort', $input->{'Port'});
                $db->set_prop('openvpn@host-to-net', 'TCPPort', '');
            } elsif ($input->{'Protocol'} eq 'tcp') {
                $db->set_prop('openvpn@host-to-net', 'TCPPort', $input->{'Port'});
                $db->set_prop('openvpn@host-to-net', 'UDPPort', '');
            }
        }
        if ($_ eq 'Remote' || $_ eq 'CustomRoutes') {
            $db->set_prop('openvpn@host-to-net', $_, join(",",@{$input->{$_}}));
        } else {
            $db->set_prop('openvpn@host-to-net', $_, $input->{$_});
        }
    }
    system(("/sbin/e-smith/signal-event", "-j", "nethserver-openvpn-save"));
} elsif ($cmd eq 'disable') {
     my $vdb = esmith::ConfigDB->open('vpn');
     $vdb->set_prop($input->{'name'}, 'status', 'disabled');
     system(("/sbin/e-smith/signal-event", "-j", "nethserver-vpn-ui-save"));
} elsif ($cmd eq 'enable') {
     my $vdb = esmith::ConfigDB->open('vpn');
     $vdb->set_prop($input->{'name'}, 'status', 'enabled');
     system(("/sbin/e-smith/signal-event", "-j", "nethserver-vpn-ui-save"));
} elsif ($cmd eq 'kill') {
    system(("/usr/libexec/nethserver/openvpn-kill", "/var/spool/openvpn/host-to-net", $input->{'name'}));
    if ($? > 0) {
        error();
    } else {
        success();
    }
} else {
    error();
}
