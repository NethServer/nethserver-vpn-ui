#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use esmith::ConfigDB;
use esmith::NetworksDB;
use NetAddr::IP;
use JSON;
use File::Temp qw/tempfile/;
use MIME::Base64;

require '/usr/libexec/nethserver/api/nethserver-vpn/lib/vpn_functions.pl';

sub find_host {
    my $db = shift;
    my $ip = shift;

    foreach ($db->get_all_by_prop('type' => 'host')) {
        return $_->key if ($_->prop('IpAddress') eq $ip);
    }

    return '';
}

my $input = readInput();
my $cmd = $input->{'action'};

my $ret = {};

if ($cmd eq 'users') {

    my @tmp;
    my $users = safe_decode_json(`/usr/libexec/nethserver/list-users`);
    foreach (keys %$users) {
        my $short = $_;
        $short =~ s/(@.*)$//;
        push(@tmp, {'name' =>  $_, 'shortname' => $short, 'gecos' => $users->{$_}{'gecos'}});
    }
    $ret->{'users'} = \@tmp;;

} elsif ($cmd eq 'interfaces') {

    my @interfaces;
    my $ndb = esmith::NetworksDB->open_ro();
    foreach ($ndb->red()) {
        next if (!$_->prop('role'));
        next if ($_->prop('type') ne 'bridge'); 
        my $bootproto = $_->prop('bootproto') || 'none';
        if ($bootproto eq 'none') {
            push(@interfaces, {"name" => $_->key, "address" => $_->prop('ipaddr')});
        } else {
            push(@interfaces, {"name" => $_->key, "address" => 'dhcp'});
        }
    }

    $ret->{'interfaces'} = \@interfaces;

} elsif ($cmd eq 'configuration') {

    my $db = esmith::ConfigDB->open_ro();
    my $record = $db->get('openvpn@host-to-net');
    my %props = $record->props;
    foreach (qw(type access TapInterface)) {
        delete($props{$_});
    }
    if ($props{'UDPPort'} ne '') {
        $props{'Protocol'} = 'udp';
        $props{'Port'} = $props{'UDPPort'};
        delete($props{'UDPPort'});
    }
    if ($props{'TCPPort'} ne '') {
        $props{'Protocol'} = 'tcp';
        $props{'Port'} = $props{'TCPPort'};
        delete($props{'TCPPort'});
    }
    foreach (qw(Remote CustomRoutes)) {
       $props{$_} = [split(",",$props{$_})];
    }
    $props{'AccountProvider'} = ($db->get_prop('sssd', 'Provider') ne '') ? JSON::true : JSON::false;
    $ret->{'configuration'} = \%props;

} elsif ($cmd eq 'algorithms') {

    $ret->{'algorithms'} = openvpn_algorithms();

} elsif ($cmd eq 'accounts') {

    my $db = esmith::HostsDB->open_ro();
    my $accounts_status = safe_decode_json(`/usr/libexec/nethserver/openvpn-status3 /var/spool/openvpn/host-to-net`);
    my $accounts = safe_decode_json(`/usr/libexec/nethserver/api/nethserver-vpn/openvpn-rw/list-accounts`);
    foreach (@{$accounts}) {
        my $host = find_host($db, $_->{'OpenVpnIp'}) || '';
        $_->{'Host'} = $host;
        if ($accounts_status->{$_->{'name'}}) {
            $_->{'statistics'} = $accounts_status->{$_->{'name'}};
        } else {
            $_->{'statistics'} = undef;
        }
    }
    $ret->{'accounts'} = $accounts;

} elsif ($cmd eq 'download') {

    if ($input->{'type'} eq 'ovpn') {
        my $name = $input->{'name'};
        $ret->{'data'} = encode_base64(`/usr/libexec/nethserver/openvpn-local-client '$name'`);
        $ret->{'filename'} = $input->{'name'}.".ovpn";
    } elsif ($input->{'type'} eq 'pem') {
        my $name = $input->{'name'};
        $ret->{'data'} = encode_base64(`cat /var/lib/nethserver/certs/$name.key /var/lib/nethserver/certs/$name.crt /etc/pki/tls/certs/NSRV.crt`);
        $ret->{'filename'} = $input->{'name'}.".pem";
    } elsif ($input->{'type'} eq 'pkcs12') {
        my $name = $input->{'name'};
        $ret->{'data'} = encode_base64(`cat /var/lib/nethserver/certs/$name.p12`);
        $ret->{'filename'} = $input->{'name'}.".p12";
    } else {
        error();
    }

} else {
    error();
}

print encode_json($ret);
