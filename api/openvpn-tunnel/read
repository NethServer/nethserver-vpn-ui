#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use esmith::ConfigDB;
use esmith::NetworksDB;
use NetAddr::IP;
use JSON;
use File::Temp qw/tempfile/;
use MIME::Base64;

require '/usr/libexec/nethserver/api/nethserver-vpn-ui/lib/vpn_functions.pl';

my $input = readInput();
my $cmd = $input->{'action'};

my $ret = {};

if ($cmd eq 'tunnels') {
    my $db = esmith::ConfigDB->open_ro('vpn');
    my @tunnels;
    foreach ($db->get_all()) {
        my $name = $_->key;
        my @params = qw(LocalNetworks RemoteNetworks);
        my $path = '';
        if ($_->prop('type') eq 'openvpn-tunnel-server') {
            push(@params, 'PublicAddresses');
            $path = "/var/lib/nethserver/openvpn-tunnels/";
        } elsif ($_->prop('type') eq 'tunnel') {
            push(@params, qw(RemoteHost WanPriorities));
            $path = "/var/lib/nethserver/certs/clients/";
        } else {
            next;
        }
        my %props = $_->props;
        $props{'name'} = $name;
        for my $p (@params) {
            my $v = $props{$p} || '';
            $props{$p} = [split(/,/, $v)];
        }
        # read PSK
        if ($props{'Topology'} eq 'p2p') {
            $props{'Psk'} = read_file($path.$name.".key");
        }
        if ($props{'Topology'} eq 'subnet' && $_->prop('type') eq 'tunnel') {
            $props{'Crt'} = read_file($path.$name.".pem");
        }

        # read running status and statistics
        $props{'statistics'} = undef;
        my $running = system("systemctl status openvpn\@$name &>/dev/null");
        if ($running == 0) {
            my $statistics;
            $props{'running'} = JSON::true;
            if ($_->prop('type') eq 'openvpn-tunnel-server') {
                my $topology = $props{'Topology'};
                $statistics = safe_decode_json(`/usr/libexec/nethserver/openvpn-status3 /var/spool/openvpn/n2n-$name $topology`);
                my $k = (keys %$statistics)[0]; # find first key, assume one tunnel has only one connected client
                $statistics = $statistics->{$k};
            } else {
                $statistics = safe_decode_json(`/usr/libexec/nethserver/openvpn-state /var/spool/openvpn/n2n-$name`);
            }
            # set only if not empty
            if ($? == 0 && (scalar(keys %$statistics) > 0)) {
                $props{'statistics'} = $statistics;
            }
        } else {
            $props{'running'} = JSON::false;
        }

        push(@tunnels, \%props);
    }

    $ret->{'tunnels'} = \@tunnels;

} elsif ($cmd eq 'interfaces') {

    my @interfaces;
    my $ndb = esmith::NetworksDB->open_ro();
    foreach ($ndb->red()) {
        next if ($_->prop('type') eq 'xdsl' || $_->prop('type') eq 'xdsl-disabled');
        my $bootproto = $_->prop('bootproto') || 'none';
        if ($bootproto eq 'none') {
            push(@interfaces, {"name" => $_->key, "address" => $_->prop('ipaddr')});
        } else {
            push(@interfaces, {"name" => $_->key, "address" => 'dhcp'});
        }
    }

    $ret->{'interfaces'} = \@interfaces;

} elsif ($cmd eq 'server-defaults') {

    my $port = random(1200, 1300);
    while (is_used_port($port)) {
        $port = random(1200, 1300);
    }

    $ret->{'Port'} = $port;

    my  $net = "10.".random(0,254).".".random(0,254).".0/24";
    while (is_used_network($net)) {
        $net = "10.".random(0,254).".".random(0,254).".0/24";
    }
    $ret->{'Network'} = $net;
    $ret->{'LocalPeer'} = substr($net,0,-4)."1";
    $ret->{'RemotePeer'} = substr($net,0,-4)."2";
    $ret->{'LocalNetworks'} = get_local_networks();
    $ret->{'PublicAddresses'} = get_public_addresses();
    $ret->{'Psk'} = `/usr/sbin/openvpn --genkey --secret /dev/stdout`;

} elsif ($cmd eq 'algorithms') {

    $ret->{'algorithms'} = openvpn_algorithms();

} elsif ($cmd eq 'download') {

    if ($input->{'type'} eq 'psk') {
        $ret->{'data'} = encode_base64(read_file("/var/lib/nethserver/openvpn-tunnels/".$input->{'name'}.".key"));
        $ret->{'filename'} = $input->{'name'}.".key";
    } elsif ($input->{'type'} eq 'configuration') {
        system(("/usr/libexec/nethserver/api/nethserver-vpn-ui/openvpn-tunnel/download-json", $input->{'name'}));
        exit $?;
    } elsif ($input->{'type'} eq 'certificate') {
        my ($fh, $filename) = tempfile();
        system(("/usr/libexec/nethserver/openvpn-tunnel-pem", $input->{'name'}, $filename));
        $ret->{'data'} = encode_base64(read_file($filename));
        $ret->{'filename'} = $input->{'name'}.".pem";
    } else {
        error();
    }

} else {
    error();
}

print encode_json($ret);
