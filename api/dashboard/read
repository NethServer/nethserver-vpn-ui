#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use esmith::ConfigDB;
use JSON;
use NethServer::ApiTools;

require '/usr/libexec/nethserver/api/nethserver-vpn-ui/lib/vpn_functions.pl';

sub read_netdata
{
    my $api = shift;
    return `curl 'http://localhost:19999/$api' 2>/dev/null`;
}


my $input = readInput();
my $cmd = $input->{'action'};

my $ret = {};

if ($cmd eq 'status') {
    my $vdb = esmith::ConfigDB->open_ro('vpn');
    my $db = esmith::ConfigDB->open_ro();
    my $rw;
    my $tunnels;

    # number of ipsec servers
    # nu,ber of connected clients
    $ret->{'ipsec'}{'total'} = scalar $vdb->get_all_by_prop(type => 'ipsec-tunnel');
    my $ipsec_status = ipsec_status();
    $ret->{'ipsec'}{'connected'} = scalar(keys %$ipsec_status);

    $rw->{'total'} = scalar($vdb->get_all_by_prop(type => 'vpn')) + scalar($vdb->get_all_by_prop(type => 'vpn-user'));
    my $rw_status = safe_decode_json(`/usr/libexec/nethserver/openvpn-status3 /var/spool/openvpn/host-to-net 2>/dev/null`);
    $rw->{'connected'} = scalar(keys %$rw_status);
    $rw->{'status'} = $db->get_prop('openvpn@host-to-net', 'status');
    $rw->{'mode'} = $db->get_prop('openvpn@host-to-net', 'Mode');
    $rw->{'auth'} = $db->get_prop('openvpn@host-to-net', 'AuthMode');
    $rw->{'port'} = $db->get_prop('openvpn@host-to-net', 'TCPPort') || $db->get_prop('openvpn@host-to-net', 'UDPPort');
    $rw->{'interfaces'} = ['tunrw'];
    my $top_traffic_accounts = safe_decode_json(`/usr/libexec/nethserver/api/nethserver-vpn-ui/openvpn-rw/top-traffic-accounts`);
    $rw->{'topTrafficAccounts'} = $top_traffic_accounts;

    # retrieve the number of users per wanIP
    my $data = NethServer::ApiTools::safe_decode_json(`/usr/libexec/nethserver/openvpn-status3 /var/spool/openvpn/host-to-net`);
    foreach my $key (keys %{$data}) {
        $rw->{usersPerWanIP}{"$data->{$key}->{'red_interface'} ($data->{$key}->{'provider'})"}++;
    }
    # return empty json object if no connections
    $rw->{usersPerWanIP} = {} if scalar(keys %$data) == 0;

    $tunnels->{'total'} = 0;
    $tunnels->{'connected'} = 0;
    $tunnels->{'interfaces'} = [];

    foreach ($vdb->get_all()) {
        my $statistics;
        my $name = $_->key;
        my $topology = $_->prop('Topology') || 'subnet';
        if ($_->prop('type') eq 'openvpn-tunnel-server') {
            $statistics = safe_decode_json(`/usr/libexec/nethserver/openvpn-status3 /var/spool/openvpn/n2n-$name $topology`);
        } elsif ($_->prop('type') eq 'tunnel') {
            $statistics = safe_decode_json(`/usr/libexec/nethserver/openvpn-state /var/spool/openvpn/n2n-$name $topology`);
        } else {
            next;
        }
        push(@{$tunnels->{'interfaces'}}, "tun$name");
        $tunnels->{'connected'}++ if (scalar(keys %$statistics) > 0);
        $tunnels->{'total'}++;
    }

    $ret->{'openvpn'}{'roadwarrior'} = $rw;
    $ret->{'openvpn'}{'tunnels'} = $tunnels;

} elsif ($cmd eq 'chart') {

    my $interface = $input->{'name'};

    my $txt = read_netdata("/api/v1/data?chart=net.$interface&format=csv&before=0&after=-300&options=abs,seconds");
    if ($txt && index($txt, "Chart is not found") < 0) {
        my @lines = split("\n",$txt);
        $ret->{'labels'} = ['time', 'received', 'sent'];
        $ret->{'data'} = [];
        shift @lines; # remove header
        foreach my $line (@lines) {
            my @values = split(",",$line);
            my @tmp = map(int, @values);
            push($ret->{'data'}, \@tmp);
        }
    }


} else {
    error();
}

print encode_json($ret);
